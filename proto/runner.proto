syntax = "proto3";
package runner;

service Runner {
  // PullJobs fetches a list of jobs from the runner
  rpc PullJobs(PullJobsRequest) returns (PullJobsResponse);

  // StreamJobs receives a stream of jobs and returns a stream of results
  rpc StreamJobs(stream Job) returns (stream RunJobResponse);
}

message PullJobsRequest {}

message PullJobsResponse { repeated Job jobs = 1; }

message Job {
  string job_id = 1;
  Target target = 2;
  string exploit_name = 3;
  string flag_regex = 4;
  bytes exploit_bundle = 5;

  /// Status of the job (i.e. pending, running, completed, failed)
  Status status = 6;
}

enum Status {
  JOB_PENDING = 0;
  JOB_RUNNING = 1;
  JOB_COMPLETED = 2;
  JOB_FAILED = 3;
}

message JobResult {
  string job_id = 1;
  int32 exit_code = 2;
  string stdout = 3;
  string stderr = 4;
  repeated Flag flags = 5;
  string timestamp = 6;
}

message Target {
  /// ID for the target
  ///
  /// Preferably lowercase and kebab-case.
  ///
  /// If not provided, the host will try to be used as the ID.
  optional string id = 1;

  /// Host of the target
  string host = 2;

  /// Port of the target
  uint32 port = 3;
}

message RunJobResponse {
  string job_id = 1;
  int32 exit_code = 2;
  string stdout = 3;
  string stderr = 4;
  repeated Flag flags = 5;
}

message Flag {
  /// Target we've found the flag on
  optional string target_id = 1;

  /// Value of the flag
  string value = 2;

  /// Name of the exploit that found the flag
  string exploit_name = 3;

  /// Timestamp of when the flag was found
  string timestamp = 4;
}

enum RunnerStatus {
  RUNNER_IDLE = 0;
  RUNNER_RUNNING = 1;
  RUNNER_COMPLETED = 2;
  RUNNER_FAILED = 3;
}

message RunnerInfo {
  string id = 1;
  string addr = 2;
  string last_seen = 3;
  RunnerStatus status = 4;
}